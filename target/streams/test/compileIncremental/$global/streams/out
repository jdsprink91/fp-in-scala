[0m[[0mdebug[0m] [0m[naha] The exceptions.Some$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	traverse.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) exceptions.Some$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) exceptions.Some$.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/exceptions/OptionTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The laziness.Stream$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	zipMerge.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) laziness.Stream$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) laziness.Stream$.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/laziness/StreamTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The purelyFunctionalState.RNG$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	map2, get, set, int.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) purelyFunctionalState.RNG$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) purelyFunctionalState.RNG$.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/purelyFunctionalState/pureFunctionsTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The exceptions.Option source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	traverse.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) exceptions.Option: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) exceptions.Option.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/exceptions/OptionTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The laziness.Stream source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	zipMerge.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) laziness.Stream: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) laziness.Stream.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/laziness/StreamTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The exceptions.Option$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	traverse.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) exceptions.Option$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) exceptions.Option$.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/exceptions/OptionTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The purelyFunctionalState.RNG source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	map2, get, set, int.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) purelyFunctionalState.RNG: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) purelyFunctionalState.RNG.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/purelyFunctionalState/pureFunctionsTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The exceptions.Some source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	traverse.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) exceptions.Some: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) exceptions.Some.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/exceptions/OptionTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] The exceptions.None$ source file has the following regular definitions changed:[0m
[0m[[0mdebug[0m] [0m[naha] 	traverse.[0m
[0m[[0mdebug[0m] [0m[naha] All member reference dependencies will be considered within this context.[0m
[0m[[0mdebug[0m] [0m[naha] Files invalidated by inheriting from (external) exceptions.None$: Set(); now invalidating by inheritance (internally).[0m
[0m[[0mdebug[0m] [0m[naha] Getting direct dependencies of all sources transitively invalidated by inheritance.[0m
[0m[[0mdebug[0m] [0m[naha] Getting sources that directly depend on (external) exceptions.None$.[0m
[0m[[0mdebug[0m] [0m[naha] None of the modified names appears in /Users/jasonsprinkle/Desktop/Code/fpScala/src/test/scala/exceptions/OptionTest.scala. This dependency is not being considered for invalidation.[0m
[0m[[0mdebug[0m] [0m[naha] [0m
[0m[[0mdebug[0m] [0m[naha] Initial source changes: [0m
[0m[[0mdebug[0m] [0m[naha] 	removed:Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	added: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	modified: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Invalidated products: Set()[0m
[0m[[0mdebug[0m] [0m[naha] External API changes: API Changes: Set(NamesChange(exceptions.Some$,ModifiedNames(regularNames = traverse, implicitNames = )), NamesChange(laziness.Stream$,ModifiedNames(regularNames = zipMerge, implicitNames = )), NamesChange(purelyFunctionalState.RNG$,ModifiedNames(regularNames = map2, get, set, int, implicitNames = )), NamesChange(exceptions.Option,ModifiedNames(regularNames = traverse, implicitNames = )), NamesChange(laziness.Stream,ModifiedNames(regularNames = zipMerge, implicitNames = )), NamesChange(exceptions.Option$,ModifiedNames(regularNames = traverse, implicitNames = )), NamesChange(purelyFunctionalState.RNG,ModifiedNames(regularNames = map2, get, set, int, implicitNames = )), NamesChange(exceptions.Some,ModifiedNames(regularNames = traverse, implicitNames = )), NamesChange(exceptions.None$,ModifiedNames(regularNames = traverse, implicitNames = )))[0m
[0m[[0mdebug[0m] [0m[naha] Modified binary dependencies: Set()[0m
[0m[[0mdebug[0m] [0m[naha] Initial directly invalidated sources: Set()[0m
[0m[[0mdebug[0m] [0m[naha] [0m
[0m[[0mdebug[0m] [0m[naha] Sources indirectly invalidated by:[0m
[0m[[0mdebug[0m] [0m[naha] 	product: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	binary dep: Set()[0m
[0m[[0mdebug[0m] [0m[naha] 	external source: Set()[0m
[0m[[0mdebug[0m] [0mAll initially invalidated sources: Set()[0m
